openapi: 3.0.1
info:
  title: Weight-loss Grapher
  description: >-
    This API will allow my [weight-loss
    website](https://github.com/farrej10/weight-loss-web-ui) to get data from a
    MySQL database. It provides a simple RESTful api to interface with.
  version: 1.0.0
servers:
  - url: 'https://weight.james-farrell.com/api'
tags:
  - name: User
    description: Operations about user
  - name: Weights
    description: Operations about Weights
paths:
  /user:
    get:
      security:
        - cookieAuth: []
      tags:
        - User
      summary: Gets all users.
      description: "Must be an admin to perform this action, can be filtered by name."
      operationId: getUserList
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: The name you wish to filter by.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/{user_id}:
    get:
      security:
        - cookieAuth: []
      tags:
        - User
      summary: Gets a user by ID.
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{user_id}/weights:
    get:
      security:
        - cookieAuth: []
      tags:
        - User
      summary: Gets list of weights for user.
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: start
          schema:
            type: string
          description: This parameter allows filtering from that date.
        - in: query
          name: end
          schema:
            type: string
          description: This parameter allows filtering till that date.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weight'
  /current-user:
    get:
      security:
        - cookieAuth: []
      tags:
        - User
      summary: Gets current user details.
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: getcurrentUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /weights:
    get:
      security:
        - cookieAuth: []
      tags:
        - Weights
      summary: Gets all weights for all users.
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          description: This parameter allows filtering by user_id.
        - in: query
          name: name
          schema:
            type: string
          description: This parameter allows filtering by name of user.
        - in: query
          name: start
          schema:
            type: string
          description: This parameter allows filtering from that date.
        - in: query
          name: end
          schema:
            type: string
          description: This parameter allows filtering till that date.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weight'
    post:
      summary: Creates a new weight for a user.
      tags:
        - Weights
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Weight'
      security: []    # no authentication
      responses:
        '201':
          description: >
            After a successful creation the object is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
          
          
  /auth:
    post:
      summary: Logs in and returns the authentication  cookie
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              type: object
              properties:
               email: 
                type: string
               pass: 
                type: string
      security: []    # no authentication
      responses:
        '200':
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `token`. You need to include this cookie in subsequent requests.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: token=abcde12345; Secure; HttpOnly; Path=/
components:
  schemas:
    User:
      type: object
      required:
        - user_id
        - name
        - email
        - admin
      properties:
        user_id:
          type: integer
        name:
          type: string
        email:
          type: string
        admin:
          type: integer
    Weight:
      required:
        - user_id
        - weight
      type: object
      properties:
        user_id:
          type: integer
        timestamp:
          type: string
        weight:
          type: number
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
